const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise'); 
const app = express();
const port = 5000;
const bcrypt = require('bcryptjs');

app.use(cors());
app.use(express.json());

let db;

// Connexion √† la base de donn√©es
async function startServer() {
  try {
    db = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'la_poste_kantaoui'
    });
    console.log('‚úÖ Connect√© √† la base de donn√©es MySQL');
    app.listen(port, () => {
      console.log(`üöÄ Serveur backend d√©marr√© sur http://localhost:${port}`);
    });
  } catch (err) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es :', err.message);
  }
}


// Fonction pour v√©rifier le mot de passe
function verifierMotDePasse(identifiant, motDePasseEntr√©) {
  // Requ√™te pour r√©cup√©rer le mot de passe hach√© de la base de donn√©es
  connection.query('SELECT mtp FROM login WHERE identifiant = ?', [identifiant], (error, results) => {
    if (error) {
      console.log('Erreur SQL:', error);
      return;
    }

    if (results.length > 0) {
      const motDePasseHach√© = results[0].mtp;

      // Comparer le mot de passe hach√© avec celui entr√© par l'utilisateur
      bcrypt.compare(motDePasseEntr√©, motDePasseHach√©, (err, isMatch) => {
        if (err) {
          console.log('Erreur de comparaison:', err);
          return;
        }

        if (isMatch) {
          console.log('Mot de passe correct !');
          // L'utilisateur peut se connecter ici
        } else {
          console.log('Mot de passe incorrect.');
        }
      });
    } else {
      console.log('Utilisateur non trouv√©.');
    }
  });
}

// Appeler la fonction de v√©rification avec un identifiant et un mot de passe
verifierMotDePasse('monuser', 'azerty123');



// Routes

// ‚ûî Envoi de colis
app.post('/api/envoi', async (req, res) => {
  const { expediteur, destinataire, numeroTel, adresseLivraison, poids } = req.body;
  try {
    const sql = 'INSERT INTO colis_envoi (expediteur, destinataire, numeroTel, adresseLivraison, poids) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [expediteur, destinataire, numeroTel, adresseLivraison, poids]);
    res.status(200).json({ message: "Colis envoy√© enregistr√© avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement de l'envoi." });
  }
});

// ‚ûî R√©ception de colis
app.post('/api/reception', async (req, res) => {
  const { destinataire, expediteur, numeroTel, adresse, suivi } = req.body;
  try {
    const sql = 'INSERT INTO colis_reception (destinataire, expediteur, numeroTel, adresse, suivi) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [destinataire, expediteur, numeroTel, adresse, suivi]);
    res.status(200).json({ message: "R√©ception enregistr√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement de la r√©ception." });
  }
});

// ‚ûî Cr√©ation de r√©clamation
app.post('/api/reclamations', async (req, res) => {
  const { numeroReclamation, typeReclamation, description } = req.body;
  if (!numeroReclamation || !typeReclamation || !description) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO reclamations (numeroReclamation, typeReclamation, description, status) VALUES (?, ?, ?, ?)';
    await db.execute(sql, [numeroReclamation, typeReclamation, description, 'Cr√©√©e']);
    res.status(200).json({ message: "R√©clamation cr√©√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de la cr√©ation de la r√©clamation." });
  }
});

// ‚ûî Suivi d'une r√©clamation
app.get('/api/reclamations/:numeroReclamation', async (req, res) => {
  const { numeroReclamation } = req.params;
  try {
    const sql = 'SELECT * FROM reclamations WHERE numeroReclamation = ?';
    const [rows] = await db.execute(sql, [numeroReclamation]);
    if (rows.length === 0) {
      return res.status(404).json({ message: 'R√©clamation non trouv√©e.' });
    }
    res.status(200).json(rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors du suivi de la r√©clamation." });
  }
});

// ‚ûî Cl√¥ture d'une r√©clamation
app.patch('/api/reclamations/:numeroReclamation', async (req, res) => {
  const { numeroReclamation } = req.params;
  const { status } = req.body;
  if (status !== 'Cl√¥tur√©e') {
    return res.status(400).json({ message: 'Le statut de la r√©clamation doit √™tre "Cl√¥tur√©e".' });
  }
  try {
    const sql = 'UPDATE reclamations SET status = ? WHERE numeroReclamation = ?';
    const [result] = await db.execute(sql, [status, numeroReclamation]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'R√©clamation non trouv√©e.' });
    }
    res.status(200).json({ message: "R√©clamation cl√¥tur√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de la cl√¥ture de la r√©clamation." });
  }
});


// ‚ûî Ajouter un compte
app.post('/api/gerercomptes', async (req, res) => {
  const { nom, prenom, identifiant, motDePasse, role } = req.body;
  if (!nom || !prenom || !identifiant || !motDePasse || !role) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO gerercomptes (nom, prenom, identifiant, motDePasse, role) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [nom, prenom, identifiant, motDePasse, role]);
    res.status(200).json({ message: 'Compte ajout√© avec succ√®s.' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'ajout du compte." });
  }
});


// ‚ûî Planification de cong√©s
app.post('/api/planifierconges', async (req, res) => {
  const { employe, dateDebut, dateFin } = req.body;
  if (!employe || !dateDebut || !dateFin) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO conges (employe, dateDebut, dateFin) VALUES (?, ?, ?)';
    await db.execute(sql, [employe, dateDebut, dateFin]);
    res.status(200).json({ message: 'Cong√© planifi√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur lors de l\'insertion des cong√©s :', err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement du cong√©." });
  }
});

// ‚ûî Envoi de mandat
app.post('/api/mandats/envoi', async (req, res) => {
  const { expediteur, beneficiaire, type, montant, numeroTel, dateEnvoi } = req.body;
  if (!expediteur || !beneficiaire || !type || !montant || !numeroTel || !dateEnvoi) {
    return res.status(400).json({ message: 'Tous les champs sont obligatoires.' });
  }
  try {
    const sql = 'INSERT INTO mandats_envoi (expediteur, beneficiaire, type, montant, numeroTel, date_envoi) VALUES (?, ?, ?, ?, ?, ?)';
    const [result] = await db.execute(sql, [expediteur, beneficiaire, type, montant, numeroTel, dateEnvoi]);
    res.status(201).json({ message: 'Mandat envoy√© avec succ√®s.', mandatId: result.insertId });
  } catch (err) {
    console.error('Erreur serveur lors de l\'envoi du mandat:', err);
    res.status(500).json({ message: 'Erreur serveur lors de l\'envoi du mandat.' });
  }
});

// ‚ûî R√©ception de mandat
app.post('/api/mandats/reception', async (req, res) => {
  const { expediteur, beneficiaire, type, montant, numeroTel, cin } = req.body;
  if (!expediteur || !beneficiaire || !type || !montant || !numeroTel || !cin) {
    return res.status(400).json({ message: 'Tous les champs sont obligatoires.' });
  }
  try {
    const sql = 'INSERT INTO mandats_reception (expediteur, beneficiaire, type, montant, numeroTel, cin) VALUES (?, ?, ?, ?, ?, ?)';
    await db.execute(sql, [expediteur, beneficiaire, type, montant, numeroTel, cin]);
    res.status(201).json({ message: 'R√©ception de mandat enregistr√©e avec succ√®s.' });
  } catch (err) {
    console.error('Erreur serveur lors de la r√©ception du mandat:', err);
    res.status(500).json({ message: 'Erreur serveur lors de la r√©ception du mandat.' });
  }
});


// Route gestion de paiement chef d'agence 

  app.post('/paiement', async (req, res) => {
    const { montant, date } = req.body;
  
    // V√©rification des donn√©es re√ßues
    if (!montant || !date) {
      return res.status(400).json({ message: 'Tous les champs doivent √™tre remplis.' });
    }
    console.log('Re√ßu :', { montant,date });
    try {
      // Ins√©rer le paiement dans la base de donn√©es
      const sql = 'INSERT INTO paiements (montant, date) VALUES (?, ?)';
      await db.execute(sql, [montant, date]);
  
      // R√©ponse de succ√®s
      res.status(200).json({ message: '‚úÖ Paiement effectu√© avec succ√®s !' });
    } catch (err) {
      // Erreur serveur
      console.error('Erreur serveur lors du paiement:', err);
      res.status(500).json({ message: '‚ùå Erreur serveur lors du paiement.' });
    }
  });




// ‚ûî Paiement de factures
app.post('/api/paiementfactures', async (req, res) => {
  const { nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement } = req.body;

  console.log('Donn√©es re√ßues du front-end :', { nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement });

  // V√©rifier que tous les champs sont pr√©sents
  if (!nomClient || !prenomClient || !numeroTel || !email || !typeFacture || !fournisseur || !numeroFacture || !montant || !modePaiement) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }

  try {
    const sql = 'INSERT INTO paiementfactures (nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
    
    
    await db.execute(sql, [nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement]);

    res.status(201).json({ message: 'Paiement ajout√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur lors de l\'insertion du paiement:', err);
    res.status(500).json({ message: 'Erreur serveur lors de l\'ajout du paiement.' });
  }
});



// ‚ûî Gestion du pointage
app.post('/api/gererpointage', async (req, res) => {
  const { employe, date, statut } = req.body;

  console.log("Donn√©es re√ßues pour insertion :", { employe, date, statut });

  if (!employe || !date || !statut ) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO gererpointage (employe, date, statut) VALUES (?, ?, ?)';
    await db.execute(sql, [employe, date, statut]);
    res.status(200).json({ message: 'Pointage enregistr√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur SQL :', err.message);
    res.status(500).json({ message: 'Erreur serveur : ' + err.message });
  }
});

//route de bcrypt pour le hachage des login

app.post('/api/login', async (req, res) => {
  const { identifiant, motDePasse } = req.body;

  try {
    const [rows] = await db.execute('SELECT * FROM login WHERE identifiant = ?', [identifiant]);

    if (rows.length === 0) {
      return res.status(401).json({ message: 'Identifiant incorrect.' });
    }

    const utilisateur = rows[0];

    // V√©rification du mot de passe hach√©
    const isMatch = await bcrypt.compare(motDePasse, utilisateur.mtp);

    if (isMatch) {
      return res.status(200).json({ message: 'Connexion r√©ussie.' });
    } else {
      return res.status(401).json({ message: 'Mot de passe incorrect.' });
    }

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Erreur serveur lors de la connexion.' });
  }
});
