const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise');
const bcrypt = require('bcryptjs');
const https = require('https');
const fs = require('fs');

const app = express();

// Liste des origines autoris√©es (URLs de ton frontend)
const allowedOrigins = [
  'https://kaleidoscopic-biscotti-29dfe1.netlify.app',
  'https://monfrontend.netlify.app',
  'http://localhost:3000' // si tu fais du dev local
];

app.use(cors({
  origin: function(origin, callback) {
    // Autorise les requ√™tes sans origin (ex: Postman, backend-to-backend)
    if (!origin) return callback(null, true);
    if (allowedOrigins.indexOf(origin) === -1) {
      const msg = `Le CORS policy ne permet pas cette origine : ${origin}`;
      return callback(new Error(msg), false);
    }
    return callback(null, true);
  },
  credentials: true
}));

app.use(express.json());

let connection;

async function startServer() {
  try {
    connection = await mysql.createConnection({
      host: 'sql.freedb.tech',
      user: 'freedb_nour12',
      password: '9twXWC$C3n&tvj$',
      database: 'freedb_poste12',
      port: 3306
    });

    console.log('‚úÖ Connect√© √† MySQL');

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`‚úÖ Serveur lanc√© sur le port ${PORT}`);
    });

  } catch (err) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es :', err.message);
    process.exit(1);
  }
}

startServer();

module.exports = { app, connection }; // exporte si besoin





// route anomalie avec ia
app.post('/api/anomalies', async (req, res) => {
  const { type, username, description, ip } = req.body;
  
  // V√©rification si tous les champs sont fournis
  if (!type || !username || !description || !ip) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }

  try {
    // Requ√™te SQL pour ins√©rer l'anomalie dans la base de donn√©es
    const [result] = await db.execute(
      'INSERT INTO anomalies (type, username, description, ip) VALUES (?, ?, ?, ?)',
      [type, username, description, ip]
    );
    
    // Retourner une r√©ponse confirmant l'ajout
    res.status(201).json({
      message: 'Anomalie ajout√©e avec succ√®s.',
      anomalyId: result.insertId // Retourner l'ID de l'anomalie ins√©r√©e
    });
  } catch (error) {
    console.error('Erreur lors de l\'insertion de l\'anomalie:', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
});




//audit
async function logAuditAction(userId, action) {
  try {
    await db.execute('INSERT INTO audit_logs (user_id, action) VALUES (?, ?)', [userId, action]);
    console.log(`Action enregistr√©e dans l'audit : ${action}`);
  } catch (err) {
    console.error('Erreur lors de l\'enregistrement de l\'audit :', err);
  }
}


// üîó Route test
app.get('/', (req, res) => {
  res.send('üöÄ Serveur HTTPS actif !');
});

// üîê Route de login avec OTP
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const [rows] = await db.execute('SELECT * FROM users WHERE username = ?', [username]);
    const user = rows[0];
    if (!user) return res.status(400).json({ message: 'Utilisateur non trouv√©.' });

    const isMatch = await bcrypt.compare(password, user.passwordHash);
    if (!isMatch) return res.status(400).json({ message: 'Mot de passe incorrect.' });

    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
    const expiration = new Date(Date.now() + 5 * 60000); // 5 min

    // Ajout de la requ√™te d'insertion avec gestion des erreurs
    const [insertResult] = await db.execute('INSERT INTO otp_codes (username, code, expiration) VALUES (?, ?, ?)', [username, otpCode, expiration]);
    console.log(`üîê OTP pour ${username} : ${otpCode}`);

    if (insertResult.affectedRows > 0) {
      res.status(200).json({ message: 'Connexion valide, OTP requis.', role: user.role });
    } else {
      console.error('‚ùå Erreur insertion OTP.');
      res.status(500).json({ message: 'Erreur serveur lors de l\'enregistrement du code OTP.' });
      await logAudit(username, 'LOGIN_SUCCESS', 'Connexion avec mot de passe valide');
    }
  } catch (err) {
    console.error('‚ùå Erreur login :', err);
    res.status(500).json({ message: 'Erreur serveur.' });

  }
});


app.post('/verify-otp', async (req, res) => {
  const { username, code } = req.body;
  try {
    const [rows] = await db.execute('SELECT * FROM otp_codes WHERE username = ? ORDER BY id DESC LIMIT 1', [username]);
    const otpRecord = rows[0];
    if (!otpRecord) return res.status(400).json({ message: 'Aucun code OTP trouv√©.' });

    const now = new Date();
    if (otpRecord.code === code && now < new Date(otpRecord.expiration)) {
      await db.execute('DELETE FROM otp_codes WHERE id = ?', [otpRecord.id]);
      res.status(200).json({ message: '‚úÖ OTP valid√©' });
    } else {
      res.status(400).json({ message: 'Code OTP invalide ou expir√©.' });
      await logAudit(username, 'OTP_VERIFIED', `Code utilis√© : ${code}`);

    }
  } catch (err) {
    console.error('‚ùå Erreur OTP :', err);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
});

// route audit 
app.post('/api/log-audit', async (req, res) => {
  // V√©rification que l'utilisateur est authentifi√©
  if (!req.user || !req.user.id) {
    return res.status(401).json({ error: 'Utilisateur non authentifi√©' });
  }

  const { action } = req.body;

  if (!action) {
    return res.status(400).json({ message: 'Action non sp√©cifi√©e.' });
  }

  try {
    await logAuditAction(req.user.id, action);
    res.status(200).json({ message: 'Audit enregistr√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur lors de l\'enregistrement de l\'audit :', err);
    res.status(500).json({ message: 'Erreur serveur lors de l\'enregistrement de l\'audit.' });
  }
});





// Routes

// ‚ûî Envoi de colis
app.post('/api/envoi', async (req, res) => {
  const { expediteur, destinataire, numeroTel, adresseLivraison, poids } = req.body;
  const actionDetails = `Exp√©diteur: ${expediteur}, Destinataire: ${destinataire}, Num√©ro de t√©l√©phone: ${numeroTel}, Adresse: ${adresseLivraison}, Poids: ${poids}`;

  try {
    const sql = 'INSERT INTO colis_envoi (expediteur, destinataire, numeroTel, adresseLivraison, poids) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [expediteur, destinataire, numeroTel, adresseLivraison, poids]);

    // Enregistrement de l'audit
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Envoi de colis', actionDetails, req.user ? req.user.id : null]);

    res.status(200).json({ message: "Colis envoy√© enregistr√© avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement de l'envoi." });
  }
});


// ‚ûî R√©ception de colis
app.post('/api/reception', async (req, res) => {
  const { destinataire, expediteur, numeroTel, adresse, suivi } = req.body;
  const actionDetails = `Destinataire: ${destinataire}, Exp√©diteur: ${expediteur}, Num√©ro de t√©l√©phone: ${numeroTel}, Adresse: ${adresse}, Suivi: ${suivi}`;

  try {
    const sql = 'INSERT INTO colis_reception (destinataire, expediteur, numeroTel, adresse, suivi) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [destinataire, expediteur, numeroTel, adresse, suivi]);

    // Enregistrement de l'audit
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['R√©ception de colis', actionDetails, req.user ? req.user.id : null]);

    res.status(200).json({ message: "R√©ception enregistr√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement de la r√©ception." });
  }
});



// ‚ûî Cr√©ation de r√©clamation
app.post('/api/reclamations', async (req, res) => {
  const { numeroReclamation, typeReclamation, description } = req.body;
  if (!numeroReclamation || !typeReclamation || !description) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }

  const actionDetails = `Num√©ro: ${numeroReclamation}, Type: ${typeReclamation}, Description: ${description}`;

  try {
    const sql = 'INSERT INTO reclamations (numeroReclamation, typeReclamation, description, status) VALUES (?, ?, ?, ?)';
    await db.execute(sql, [numeroReclamation, typeReclamation, description, 'Cr√©√©e']);

    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Cr√©ation de r√©clamation', actionDetails, req.user ? req.user.id : null]);

    res.status(200).json({ message: "R√©clamation cr√©√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de la cr√©ation." });
  }
});

// ‚ûî Suivi d'une r√©clamation
app.get('/api/reclamations/:numeroReclamation', async (req, res) => {
  const { numeroReclamation } = req.params;
  try {
    const sql = 'SELECT * FROM reclamations WHERE numeroReclamation = ?';
    const [rows] = await db.execute(sql, [numeroReclamation]);
    if (rows.length === 0) {
      return res.status(404).json({ message: 'R√©clamation non trouv√©e.' });
    }
    res.status(200).json(rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors du suivi." });
  }
});

// ‚ûî Cl√¥ture d'une r√©clamation
app.patch('/api/reclamations/:numeroReclamation', async (req, res) => {
  const { numeroReclamation } = req.params;
  const { status } = req.body;
  if (status !== 'Cl√¥tur√©e') {
    return res.status(400).json({ message: 'Statut invalide.' });
  }
  try {
    const sql = 'UPDATE reclamations SET status = ? WHERE numeroReclamation = ?';
    const [result] = await db.execute(sql, [status, numeroReclamation]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'R√©clamation non trouv√©e.' });
    }

    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    const details = `Cl√¥ture de la r√©clamation num√©ro ${numeroReclamation}`;
    await db.execute(auditSql, ['Cl√¥ture de r√©clamation', details, req.user ? req.user.id : null]);

    res.status(200).json({ message: "R√©clamation cl√¥tur√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de la cl√¥ture." });
  }
});

// ‚ûî Suppression d'une r√©clamation
app.delete('/api/reclamations/:numeroReclamation', async (req, res) => {
  const { numeroReclamation } = req.params;
  console.log("Tentative de suppression de la r√©clamation num√©ro:", numeroReclamation); // Log pour le d√©bogage
  try {
    const sql = 'DELETE FROM reclamations WHERE numeroReclamation = ?';
    const [result] = await db.execute(sql, [numeroReclamation]);

    if (result.affectedRows === 0) {
      console.log("R√©clamation non trouv√©e pour suppression.");  // Log si aucune ligne n'est affect√©e
      return res.status(404).json({ message: 'R√©clamation non trouv√©e.' });
    }

    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    const details = `Suppression de la r√©clamation num√©ro ${numeroReclamation}`;
    await db.execute(auditSql, ['Suppression de r√©clamation', details, req.user ? req.user.id : null]);

    res.status(200).json({ message: "R√©clamation supprim√©e avec succ√®s !" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de la suppression." });
  }
});




// ‚ûî Ajouter un compte
app.post('/api/gerercomptes', async (req, res) => {
  const { nom, prenom, identifiant, motDePasse, role } = req.body;
  
  // V√©rification des champs requis
  if (!nom || !prenom || !identifiant || !motDePasse || !role) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }

  try {
    // Insertion du nouveau compte dans la table 'gerercomptes'
    const sql = 'INSERT INTO gerercomptes (nom, prenom, identifiant, motDePasse, role) VALUES (?, ?, ?, ?, ?)';
    await db.execute(sql, [nom, prenom, identifiant, motDePasse, role]);

    // D√©finition de l'action d'audit apr√®s la d√©claration des variables
    const actionDetails = `Ajout du compte ${identifiant}`;

    // Enregistrement du log d'audit
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    const userId = req.user ? req.user.id : null; // Utilisation de l'ID de l'utilisateur, si disponible
    await db.execute(auditSql, ['Ajout compte', actionDetails, userId]);

    // R√©ponse succ√®s
    res.status(200).json({ message: 'Compte ajout√© avec succ√®s.' });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur lors de l'ajout du compte." });
  }
});




// ‚ûî Planification de cong√©s
app.post('/api/planifierconges', async (req, res) => {
  const { employe, dateDebut, dateFin } = req.body;
  if (!employe || !dateDebut || !dateFin) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO conges (employe, dateDebut, dateFin) VALUES (?, ?, ?)';
    await db.execute(sql, [employe, dateDebut, dateFin]);
    res.status(200).json({ message: 'Cong√© planifi√© avec succ√®s.' });

    const actionDetails = `Planification de cong√© pour ${employe} du ${dateDebut} au ${dateFin}`;
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Planification cong√©', actionDetails, req.user ? req.user.id : null]);

  } catch (err) {
    console.error('Erreur lors de l\'insertion des cong√©s :', err);
    res.status(500).json({ message: "Erreur serveur lors de l'enregistrement du cong√©." });
  }
});


// ‚ûî Envoi de mandat
app.post('/api/mandats/envoi', async (req, res) => {
  const { expediteur, beneficiaire, type, montant, numeroTel, dateEnvoi } = req.body;
  if (!expediteur || !beneficiaire || !type || !montant || !numeroTel || !dateEnvoi) {
    return res.status(400).json({ message: 'Tous les champs sont obligatoires.' });
  }
  try {
    const sql = 'INSERT INTO mandats_envoi (expediteur, beneficiaire, type, montant, numeroTel, date_envoi) VALUES (?, ?, ?, ?, ?, ?)';
    const [result] = await db.execute(sql, [expediteur, beneficiaire, type, montant, numeroTel, dateEnvoi]);
    res.status(201).json({ message: 'Mandat envoy√© avec succ√®s.', mandatId: result.insertId });

    const actionDetails = `Mandat envoy√© de ${expediteur} √† ${beneficiaire}, Montant: ${montant}, Type: ${type}`;
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Envoi mandat', actionDetails, req.user ? req.user.id : null]);

  } catch (err) {
    console.error('Erreur serveur lors de l\'envoi du mandat:', err);
    res.status(500).json({ message: 'Erreur serveur lors de l\'envoi du mandat.' });
  }
});

// ‚ûî R√©ception de mandat
app.post('/api/mandats/reception', async (req, res) => {
  const { expediteur, beneficiaire, type, montant, numeroTel, cin } = req.body;
  if (!expediteur || !beneficiaire || !type || !montant || !numeroTel || !cin) {
    return res.status(400).json({ message: 'Tous les champs sont obligatoires.' });
  }
  try {
    const sql = 'INSERT INTO mandats_reception (expediteur, beneficiaire, type, montant, numeroTel, cin) VALUES (?, ?, ?, ?, ?, ?)';
    await db.execute(sql, [expediteur, beneficiaire, type, montant, numeroTel, cin]);
    res.status(201).json({ message: 'R√©ception de mandat enregistr√©e avec succ√®s.' });

    const actionDetails = `R√©ception mandat pour ${beneficiaire}, Montant: ${montant}, Type: ${type}, CIN: ${cin}`;
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['R√©ception mandat', actionDetails, req.user ? req.user.id : null]);

  } catch (err) {
    console.error('Erreur serveur lors de la r√©ception du mandat:', err);
    res.status(500).json({ message: 'Erreur serveur lors de la r√©ception du mandat.' });
  }
});



// Route gestion de paiement chef d'agence 

app.post('/paiement', async (req, res) => {
  const { montant, date } = req.body;
  if (!montant || !date) {
    return res.status(400).json({ message: 'Tous les champs doivent √™tre remplis.' });
  }
  console.log('Re√ßu :', { montant, date });
  try {
    const sql = 'INSERT INTO paiements (montant, date) VALUES (?, ?)';
    await db.execute(sql, [montant, date]);
    res.status(200).json({ message: '‚úÖ Paiement effectu√© avec succ√®s !' });

    const actionDetails = `Paiement de ${montant} DT effectu√© le ${date}`;
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Paiement', actionDetails, req.user ? req.user.id : null]);

  } catch (err) {
    console.error('Erreur serveur lors du paiement:', err);
    res.status(500).json({ message: '‚ùå Erreur serveur lors du paiement.' });
  }
});




// ‚ûî Paiement de factures
app.post('/api/paiementfactures', async (req, res) => {
  const { nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement } = req.body;

  console.log('Donn√©es re√ßues du front-end :', { nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement });

  if (!nomClient || !prenomClient || !numeroTel || !email || !typeFacture || !fournisseur || !numeroFacture || !montant || !modePaiement) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }

  const actionDetails = `Client: ${nomClient} ${prenomClient}, Facture: ${numeroFacture}, Montant: ${montant}, Mode de paiement: ${modePaiement}`;

  try {
    const sql = 'INSERT INTO paiementfactures (nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
    await db.execute(sql, [nomClient, prenomClient, numeroTel, email, typeFacture, fournisseur, numeroFacture, montant, modePaiement]);

    // Enregistrement de l'audit
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Paiement de facture', actionDetails, req.user ? req.user.id : null]);

    res.status(201).json({ message: 'Paiement ajout√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur lors de l\'insertion du paiement:', err);
    res.status(500).json({ message: 'Erreur serveur lors de l\'ajout du paiement.' });
  }
});



// ‚ûî Gestion du pointage
app.post('/api/gererpointage', async (req, res) => {
  const { employe, date, statut } = req.body;
  if (!employe || !date || !statut ) {
    return res.status(400).json({ message: 'Tous les champs sont requis.' });
  }
  try {
    const sql = 'INSERT INTO gererpointage (employe, date, statut) VALUES (?, ?, ?)';
    await db.execute(sql, [employe, date, statut]);
    res.status(200).json({ message: 'Pointage enregistr√© avec succ√®s.' });

    const actionDetails = `Pointage de ${employe} enregistr√© pour la date ${date} avec statut: ${statut}`;
    const auditSql = 'INSERT INTO audit_logs (action, details, user_id) VALUES (?, ?, ?)';
    await db.execute(auditSql, ['Pointage', actionDetails, req.user ? req.user.id : null]);

  } catch (err) {
    console.error('Erreur SQL :', err.message);
    res.status(500).json({ message: 'Erreur serveur : ' + err.message });
  }
});


app.get('/api/logs', async (req, res) => {
  try {
    const [rows] = await db.execute('SELECT * FROM audit_logs ORDER BY timestamp DESC LIMIT 100');
    res.status(200).json(rows);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des logs:', err);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des logs." });
  }
});





// ‚úÖ Fonction pour d√©marrer le serveur (HTTP uniquement pour Render)
function startServer() {
  const PORT = process.env.PORT || 3000;

  app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ Serveur lanc√© sur http://0.0.0.0:${PORT}`);
  });
}

// Lancer le serveur
startServer();
